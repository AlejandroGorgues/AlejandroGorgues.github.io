---
import 'slickgrid/dist/styles/css/slick.grid.css';
import 'slickgrid/dist/styles/css/slick.pager.css';
import 'slickgrid/dist/styles/css/slick-icons.css';
import 'slickgrid/dist/styles/css/slick-alpine-theme.css';

import { getCollection } from 'astro:content';
import BaseLayout from '../layouts/BaseLayout.astro';
const links = await getCollection('link');
---
<BaseLayout>
    <slick-table style="display: flex; flex-direction: column; align-items:center; margin-top:5lh" data-links={JSON.stringify(links.map((link:{[id: string] : any})=> link.data))}>
    <div class="grid-header" style="width:75%">
        <label>Table of contents</label>
        <span style="float:right;margin:0px 4px auto 6px;cursor:pointer" class="sgi sgi-search" title="Toggle search panel"></span>
        </div>
        <div id="myGrid" class="alpine-theme" style="width:75%; height:500px;"/>
        <div id="pager" style="width:75%;"></div>
    </slick-table>

    <div id="inlineFilterPanel" style="display:none;background:#f6f6f6;color:black;height:100%;padding:4px">
    Search by <input type="text" id="txtSearch2" placeholder="title or tag">
    </div>
</BaseLayout>

<script>
  import { type Column, type GridOption }from 'slickgrid';
  import { type Link } from '../types/models/portfolioEntry.interface';

  import {
    SlickGlobalEditorLock,
    SlickRowSelectionModel,
    SlickDataView,
    SlickGrid,
  } from 'slickgrid';
  let grid: SlickGrid;
  let links: Link[];
  let data:any[] = [];

  let sortcol = "title";
  // let sortdir = 1;
  let searchString = "";
  import Sortable from 'sortablejs';

  function comparer(a:{[id: string] : any}, b:{[id: string] : any}) {
    let x = a[sortcol], y = b[sortcol];
    return (x == y ? 0 : (x > y ? 1 : -1));
  }

  function toggleFilterRow() {
    grid.setTopPanelVisibility(!grid.getOptions().showTopPanel);
  }

  function formatter(_row:number, _cell:number, value:string, _columnDef:{[id: string] : any}, _dataContext:{[id: string] : any}) {
      return value;
  }

  const columns: Column[] = [
    {id: "title", name: "Title", field: "title", sortable: true, cssClass: "rich-text", formatter: formatter, width:50},
    {id: "tag", name: "Tag", field: "tag", width:5},
  ];

  const options: GridOption = {
    editable: true,
    enableAddRow: true,
    enableCellNavigation: true,
    asyncEditorLoading: true,
    forceFitColumns: true,
    fullWidthRows:true,
    syncColumnCellResize:true,
    topPanelHeight: 35,
    rowHeight: 28
  };
  class SlickTable extends HTMLElement {
    connectedCallback() {
      // Read the message from the data attribute.
      const dataLinks = this.dataset.links
      if(dataLinks){
        links = Object.entries(JSON.parse(dataLinks) as Record<string, any>).map(([, value]) => value);
      }
    }
  }

  /**
   *  DOMContentLoaded SECTION 
   */
  document.addEventListener("DOMContentLoaded", () => {
    (window as any).Sortable = Sortable;
    links.forEach((link:Link, i:number) => {
      data[i] = {
        "id": "id_" + i,
        title: `<p style="margin: 0; padding: 0;"><a href=${link.url} >${link.title}</a></p>`,
        tag: link.tags.join(', '),
      };
    })

    const dataView = new SlickDataView({ inlineFilters: true });
    grid = new SlickGrid('#myGrid', dataView, columns, options);
    // let grid = new SlickGrid('#myGrid', data, columns, options);
    grid.setSelectionModel(new SlickRowSelectionModel());
    // let pager = new SlickGridPager(dataView, grid, "#pager");
    let topPanel = grid.getTopPanel();
    const topPanelLeftElm = document.querySelector("#inlineFilterPanel") as HTMLDivElement; 
    topPanel.appendChild(topPanelLeftElm);
    topPanelLeftElm.style.display = 'block';

    grid.onCellChange.subscribe((_e, args) => {
      dataView.updateItem(args.item.id, args.item);
    });

    grid.onKeyDown.subscribe(function (e) {
      // select all rows on ctrl-a
      if (e.which != 65 || !e.ctrlKey) {
        return false;
      }

      let rows = [];
      for (let i = 0; i < dataView.getLength(); i++) {
        rows.push(i);
      }

      grid.setSelectedRows(rows);
      e.preventDefault();
    });
    grid.onSort.subscribe((_e, args:{[id: string] : any}) => {
      // sortdir = args.sortAsc ? 1 : -1;
      sortcol = args.sortCol.field;

      // using native sort with comparer
      dataView.sort(comparer, args.sortAsc);
    });

    // wire up model events to drive the grid
    // !! both dataView.onRowCountChanged and dataView.onRowsChanged MUST be wired to correctly update the grid
    // see Issue#91
    dataView.onRowCountChanged.subscribe((_e, _args) => {
      grid.updateRowCount();
      grid.render();
    });

    dataView.onRowsChanged.subscribe((_e, args) => {
      grid.invalidateRows(args.rows);
      grid.render();
    });

    dataView.onPagingInfoChanged.subscribe((_e, pagingInfo) => {
      grid.updatePagingStatusFromView( pagingInfo );
      // show the pagingInfo but remove the dataView from the object, just for the Cypress E2E test
      delete pagingInfo.dataView;
      console.log('on After Paging Info Changed - New Paging:: ', pagingInfo);
    });

    dataView.onBeforePagingInfoChanged.subscribe((_e, previousPagingInfo) => {
      // show the previous pagingInfo but remove the dataView from the object, just for the Cypress E2E test
      delete previousPagingInfo.dataView;
      console.log('on Before Paging Info Changed - Previous Paging:: ', previousPagingInfo);
    });

    document.querySelectorAll("#txtSearch,#txtSearch2").forEach(elm => 
    (elm as HTMLInputElement).addEventListener('keyup', (e:KeyboardEvent) => {
      SlickGlobalEditorLock.cancelCurrentEdit();
      // clear on Esc
      if (e.key === 'Escape') {
        const target = e.target as HTMLInputElement;
        target.value = '';
      }

      const target = e.target as HTMLInputElement;
      searchString = (target.value || '').trim();
      updateFilter();
      dataView.refresh();
    }));

    function updateFilter() {
      dataView.setFilterArgs({
        searchString
      });
      dataView.refresh();
    }


    grid.onCellChange.subscribe((_e, args) => {
      dataView.updateItem(args.item.id, args.item);
    });

    dataView.beginUpdate();
    dataView.setItems(data);
    dataView.setFilterArgs({
      searchString
    });
    // `inlineFilters` can be a regular function or an ES6 arrow function like below
    // dataView.setFilter((item, args) => item['percentComplete'] > args.percentCompleteThreshold);
    dataView.setFilter((item, args) => {
      const searchString = args.searchString.toLowerCase();
      const itemTitle = item['title'].match(/<a.*>(.+)<\/a>/)[1]
      if (args.searchString !== '' && (!itemTitle.toLowerCase().includes(searchString)) && !item['tag'].toLowerCase().includes(searchString) ) {
      
        return false;
      }
      return true;
    });
    dataView.endUpdate();
    dataView.syncGridSelection(grid, true);
    const sgiSpan = (document.querySelector('.sgi-search') as HTMLSpanElement)
    sgiSpan.addEventListener('click', toggleFilterRow);
  });
  customElements.define('slick-table', SlickTable);
</script>

<style lang="scss">
    h1 {
        font-size: 2rem; 
        font-weight: 700; 
        justify-self: center;
        
        @media (min-width: 640px) {
            font-size:3rem;
            max-width: 80rem
        }
        @media (min-width: 1024px) {
            font-size:4rem
        }
    }

</style>
