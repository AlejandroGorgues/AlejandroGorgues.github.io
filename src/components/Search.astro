---
// Heavy inspiration taken from Astro Starlight -> https://github.com/withastro/starlight/blob/main/packages/starlight/components/Search.astro
import SearchButton from '../assets/icons/search.svg'
// import  "@pagefind/default-ui/css/ui.css"

import "../styles/search.css";
---

<site-search id="search">
	<button class="search__button" aria-keyshortcuts="Control+K Meta+K" data-open-modal disabled>
		<SearchButton fill="none" width="25" height="25"/>
		<span class="dialog-sr_only">Open Search</span>
	</button>
	<dialog aria-label="search" class="search__dialog">
		<div class="dialog-frame">
			<button class="dialog-button" data-close-modal>Close</button>
			{
				import.meta.env.NODE_ENV ? (
				// false ? (
					<div class="dialog-search-container_pre">
						<p>
							Search is only available in production builds. <br />
							Try building and previewing the site to test it out locally.
						</p>
					</div>
				) : (
					<div class="dialog-search-container">
						<div id="dialog-search"/>
					</div>
					)
			}
		</div>
	</dialog>
</site-search>

<script>
	class SiteSearch extends HTMLElement {
		#closeBtn: HTMLButtonElement | null;
		#dialog: HTMLDialogElement | null;
		#dialogFrame: HTMLDivElement | null;
		#openBtn: HTMLButtonElement | null;
		#controller: AbortController;

		constructor() {
			super();
			this.#openBtn = this.querySelector<HTMLButtonElement>("button[data-open-modal]");
			this.#closeBtn = this.querySelector<HTMLButtonElement>("button[data-close-modal]");
			this.#dialog = this.querySelector<HTMLDialogElement>("dialog");
			this.#dialogFrame = this.querySelector(".dialog-frame");
			this.#controller = new AbortController();

			// Set up events
			if (this.#openBtn) {
				this.#openBtn.addEventListener("click", this.openModal);
				this.#openBtn.disabled = false;
			} else {
				console.warn("Search button not found");
			}

			if (this.#closeBtn) {
				this.#closeBtn.addEventListener("click", this.closeModal);
			} else {
				console.warn("Close button not found");
			}

			if (this.#dialog) {
				this.#dialog.addEventListener("close", () => {
					window.removeEventListener("click", this.onWindowClick);
				});
			} else {
				console.warn("Dialog not found");
			}

			// only add pagefind in production
			if (import.meta.env.NODE_ENV) return;
			const onIdle = window.requestIdleCallback || ((cb) => setTimeout(cb, 1));
			onIdle(async () => {
				const { PagefindUI } = await import("@pagefind/default-ui");
				new PagefindUI({
					baseUrl: import.meta.env.BASE_URL,
					bundlePath: import.meta.env.BASE_URL.replace(/\/$/, "") + "/pagefind/",
					element: "#dialog-search",
					showImages: false,
					showSubResults: true,
				});
			});
		}

		connectedCallback() {
			// window events, requires cleanup
			window.addEventListener("keydown", this.onWindowKeydown, { signal: this.#controller.signal });
		}

		disconnectedCallback() {
			this.#controller.abort();
		}

		openModal = (event?: MouseEvent) => {
			if (!this.#dialog) {
				console.warn("Dialog not found");
				return;
			}

			this.#dialog.showModal();
			this.querySelector("input")?.focus();
			event?.stopPropagation();
			window.addEventListener("click", this.onWindowClick, { signal: this.#controller.signal });
		};

		closeModal = () => this.#dialog?.close();

		onWindowClick = (event: MouseEvent) => {
			// check if it's a link
			const isLink = "href" in (event.target || {});
			// make sure the click is either a link or outside of the dialog
			if (
				isLink ||
				(document.body.contains(event.target as Node) &&
					!this.#dialogFrame?.contains(event.target as Node))
			) {
				this.closeModal();
			}
		};

		onWindowKeydown = (e: KeyboardEvent) => {
			if (!this.#dialog) {
				console.warn("Dialog not found");
				return;
			}
			// check if it's the Control+K or âŒ˜+K shortcut
			if ((e.metaKey === true || e.ctrlKey === true) && e.key === "k") {
				this.#dialog.open ? this.closeModal() : this.openModal();
				e.preventDefault();
			}
		};
	}

	customElements.define("site-search", SiteSearch);
</script>

<style lang="scss">
@use '../styles/_variables' as v;

.search__button{
	display: flex;
	align-items: center;
	justify-content: center;
	cursor: pointer;
	border-radius: 0.375rem; /* rounded-md */
	transition: border-color 0.2s;  /* Para efecto hover suave */
	border: 2px solid;
	background-color: transparent;
	border-color: transparent;
}

.search__button:hover {
	border-color: v.$portfolio-pagefind-button-hover-color;
}

.search__dialog{
	background-color: v.$portfolio-pagefind-dialog-bg-color;
	height: 100%;
	max-height: 100%;
	width: 100%;
	max-width: 100%;
	border: v.$portfolio-pagefind-dialog-border;
	box-shadow:  v.$portfolio-pagefind-dialog-box-shadow;
	backdrop-filter: blur(4px); /* backdrop:backdrop-blur-sm */
}

[open] .search__dialog {
	display: flex;
}


@media (min-width: 640px) {
	.search__dialog {
		margin-left: auto;
		margin-right: auto;
		margin-top: 4rem;
		margin-top: 1.75lh;
		margin-bottom: auto;
		height: max-content;
		max-height: calc(100% - 8rem);
		min-height: 15rem;
		width: 100%;
		max-width: 50%;
		border-radius: 0.5rem;
	}
}

.dialog-frame{
	display: flex;
	flex-grow: 1;
	flex-direction: column;
	gap: 1rem;
	padding: 1.5rem;
	padding-top: 3rem;
}

@media (min-width: 640px) {
	.dialog-frame {
		padding-top: 1.5rem;
	}
}

.dialog-sr_only{
	position: absolute;
	width: 1px;
	height: 1px;
	padding: 0;
	margin: -1px;
	overflow: hidden;
	clip: rect(0, 0, 0, 0);
	white-space: nowrap;
	border: 0;
}

.dialog-button{
	margin-inline-start: auto;
	cursor: pointer;
	border-radius: 0.375rem;
	border-color: transparent;
	background-color: v.$portfolio-pagefind-dialog-button-bgcolor;
	padding: 0.5rem;
}

.dialog-search-container_pre{
	margin-left: auto;
	margin-right: auto;
	text-align: center;
}
</style>